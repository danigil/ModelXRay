[1;35mPyTorch version 2.4.0+cu118 available.[0m
[1;35mTensorFlow version 2.14.0 available.[0m
[33mUsing an external artifact as step input currently invalidates caching for the step and all downstream steps. Future releases will introduce hashing of artifacts which will improve this behavior.[0m
[1;35mInitiating a new run for the pipeline: [0m[1;36mcompile_preprocessed_images_registry_pipeline[1;35m.[0m
[1;35mUploading external artifact to 'external_artifacts/external_938a79fd-a107-44f4-a304-fd08d94faee8'.[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[33mNo materializer is registered for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m, so the default Pickle materializer was used. Pickle is not production ready and should only be used for prototyping as the artifacts cannot be loaded when running with a different Python version. Please consider implementing a custom materializer for type [0m[1;36m<class 'model_xray.config_classes.PretrainedModelConfig'>[33m according to the instructions at [0m[34mhttps://docs.zenml.io/how-to/handle-data-artifacts/handle-custom-data-types[33m[0m
[1;35mFinished uploading external artifact 3769b900-0891-4738-aa5d-2d8cbd66510a.[0m
[1;35mExecuting a new run.[0m
[1;35mUsing user: [0m[1;36mdefault[1;35m[0m
[1;35mUsing stack: [0m[1;36mcustom-stack[1;35m[0m
[1;35m  artifact_store: [0m[1;36mcustom_local[1;35m[0m
[1;35m  experiment_tracker: [0m[1;36mmlflow_experiment_tracker[1;35m[0m
[1;35m  orchestrator: [0m[1;36mdefault[1;35m[0m
[1;35mDashboard URL: [0m[34mhttp://127.0.0.1:8237/runs/1d13e312-e266-4e80-89c5-69cf5ac15abb[1;35m[0m
[1;35mStep [0m[1;36mcompile_preprocessed_images_registry[1;35m has started.[0m
	successfully compiled 24 preprocessed images from EfficientNetV2B2 pretrained model
	successfully compiled 24 preprocessed images from EfficientNetV2B1 pretrained model
	successfully compiled 24 preprocessed images from EfficientNetV2M pretrained model
	successfully compiled 24 preprocessed images from ResNet152 pretrained model
	successfully compiled 24 preprocessed images from EfficientNetV2S pretrained model
	successfully compiled 24 preprocessed images from InceptionV3 pretrained model
	successfully compiled 24 preprocessed images from DenseNet169 pretrained model
	successfully compiled 24 preprocessed images from EfficientNetV2B3 pretrained model
	successfully compiled 24 preprocessed images from DenseNet201 pretrained model
	successfully compiled 24 preprocessed images from MobileNet pretrained model
	successfully compiled 24 preprocessed images from DenseNet121 pretrained model
	successfully compiled 24 preprocessed images from InceptionResNetV2 pretrained model
	successfully compiled 24 preprocessed images from NASNetLarge pretrained model
	successfully compiled 24 preprocessed images from NASNetMobile pretrained model
	successfully compiled 24 preprocessed images from Xception pretrained model
	successfully compiled 24 preprocessed images from ResNet101 pretrained model
	successfully compiled 24 preprocessed images from EfficientNetV2B0 pretrained model
	successfully compiled 24 preprocessed images from ResNet152V2 pretrained model
	successfully compiled 24 preprocessed images from ResNet101V2 pretrained model
[33mUnable to restore artifact store while trying to load artifact [0m[1;36m41034f4e-aad6-4b19-bf07-4826a1e1b741[33m. If this artifact is stored in a remote artifact store, this might lead to issues when trying to load the artifact.[0m
	successfully compiled 24 preprocessed images from MobileNetV2 pretrained model
	successfully compiled 24 preprocessed images from MobileNetV3Small pretrained model
	successfully compiled 24 preprocessed images from ResNet50V2 pretrained model
	successfully compiled 24 preprocessed images from MobileNetV3Large pretrained model
	successfully compiled 24 preprocessed images from ResNet50 pretrained model
successfully compiled 576 preprocessed images from 24 pretrained models
[1;35mStep [0m[1;36mcompile_preprocessed_images_registry[1;35m has finished in [0m[1;36m5m47s[1;35m.[0m
[1;35mStep [0m[1;36mcompile_preprocessed_images_registry[1;35m completed successfully.[0m
[1;35mPipeline run has finished in [0m[1;36m5m47s[1;35m.[0m
